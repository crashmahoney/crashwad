version "4.2"
#include "zscript/Dynamic Difficulty.zs"
#include "zscript/Level Transitions.zs"
#include "zscript/c_food.zs"
#include "zscript/c_hud.zs"
#include "zscript/c_money.zs"
#include "zscript/c_monster_base.zs"
#include "zscript/c_particles.zs"
#include "zscript/c_player.zs"
#include "zscript/c_weapon_base.zs"
#include "zscript/c_weapon_pistol.zs"

#include "zscript/z_Models.zs"

#include "zscript/z_Props.zs"
#include "zscript/z_Props_Explosive.zs"
#include "zscript/z_Props_Furniture.zs"
#include "zscript/z_Props_Glass.zs"
#include "zscript/z_Props_Lights.zs"
#include "zscript/z_Props_Vegetation.zs"

#include "zscript/z_Particles.zs"


class IncreaseMonsterScale : EventHandler
	{
	override void WorldThingSpawned (WorldEvent e)
		{
			// Make monsters slightly bigger to compensate for increased player view height
			if (e.Thing.bIsMonster)
			{
				e.Thing.scale *= 1.3;
			}
		}
	}

/*
class GlassSetup : EventHandler
{
	override void WorldLoaded(WorldEvent e)
	{
		// iterate through all lines in the current map
		for (int i = 0; i < level.Lines.Size(); i++)
		{
			// get current line
			Line l = level.Lines[i];

			// get the special assigned to the current line
			//int spec = l.special;

			// if the line is an Exit_Normal line (243), overwrite it
			// with a naughty ACS script (7777)
			if (spec == 243)
			{
				// ACS_ExecuteAlways is special 226
				l.special = 226;

				// set the args
				l.args[0] = 7777;
				l.args[1] = 0;
				l.args[2] = 0;
				l.args[3] = 0;
				l.args[4] = 0;

				// be sure to make the line repeatable
				l.flags |= Line.ML_REPEAT_SPECIAL;
			}
		}
	}
}

*/
class WaterHandler : StaticEventHandler {
	override void RenderOverlay(RenderEvent e) {
		// set the player's timer up correctly (more-than-1-tick precision)
		PlayerInfo p = players[consoleplayer];
		Shader.SetUniform1f(p, "watershader", "timer", gametic + e.FracTic);

		if (p.mo.waterlevel >= 3) {
			Shader.SetEnabled(p, "watershader", true);
			Shader.SetEnabled(p, "waterzoomshader", true);
			double effectSize = CVar.GetCVar("uw_effectsize", p).GetFloat();
			Shader.SetUniform1f(p, "watershader", "waterFactor", effectSize);
			Shader.SetUniform1f(p, "waterzoomshader", "zoomFactor", 1 - (effectSize * 2));
		}
		else {
			Shader.SetEnabled(p, "watershader", false);
			Shader.SetEnabled(p, "waterzoomshader", false);
		}
	}
}

/*

class Functions
{
	void SetPlayerPawn (string name)
	{
		// Iterate through all of the possible players in the game
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			// If a player is in the game and has spawned...
			if (playeringame[i] && players[i].mo)
			{
				// set to the first player found
				if (!name) { name = players[i].mo; }
		 // 	else { name = null; break; }
			}
		}
	}
}

*/


// Computer Text Thing ---------------------------------------------------------

class ComputerText : Actor
{
	Default
	{
		Radius 8;
		Height 8;
		XScale 0.9;
		YScale 0.7;
		-SOLID
		+NOGRAVITY
		+WallSprite
	}
	States
	{
	Spawn:
		FONT A 0 NoDelay
		{
			frame = tid - 9000;
			if (tid == 255)
			{
				frame = random(0,26);  // 65 = A, 90 = Z
			}
		}
	Idle:
		"####" "#" 4 A_SpawnItemEx("CoronaGreenFaded",0,0,4,0,0,0,0,SXF_NOCHECKPOSITION ,0,tid);
		Loop;


	XDeath: // unused state just to make sure the graphics are cached
		FONT ABCDEFGHIJKLMNOPQRSTUVWXYZ 2;
		Stop;
	}
}

class ComputerCursor : ComputerText
{
States
	{
	Spawn:
		CURS A 4 A_SpawnItemEx("CoronaGreenFaded",0,0,4,0,0,0,0,SXF_NOCHECKPOSITION ,0,9000);
		CURS B 4;
		Loop;
	}
}







//===========================================================================
//
// GENERIC PHYSICS CLASS
//
//===========================================================================

// Written by ZZYZX
// Modified by Nash Muhandes
// Modified again by Crash ;)
class Physics play
{
   // this one works for flat sprites
    static void AlignToSlopeSprite(Actor self, double dAng, double dPitch)
    {
        vector3 fNormal = self.CurSector.FloorPlane.Normal;
        vector2 fNormalP1 = (fNormal.X != 0 || fNormal.Y != 0) ? (fNormal.X, fNormal.Y).Unit() : (0, 0);
        vector2 fNormalP2 = ((fNormal.X, fNormal.Y).Length(), fNormal.Z);
        double fAng = atan2(fNormalP1.Y, fNormalP1.X); // floor angle (not pitch!)
        double fPitch = atan2(fNormalP2.X, fNormalP2.Y); // floor pitch
        self.Pitch = fPitch;
        self.Angle = fAng;
		self.Roll = dAng;
    }

	static void AlignToSlope(Actor self, double dAng, double dPitch)
    {
        vector3 fNormal = self.CurSector.FloorPlane.Normal;
        vector2 fNormalP1 = (fNormal.X != 0 || fNormal.Y != 0) ? (fNormal.X, fNormal.Y).Unit() : (0, 0);
        vector2 fNormalP2 = ((fNormal.X, fNormal.Y).Length(), fNormal.Z);
        double fAng = atan2(fNormalP1.Y, fNormalP1.X); // floor angle (not pitch!)
        double fPitch = -atan2(fNormalP2.X, fNormalP2.Y); // floor pitch
        double dDiff1 = sin(fAng - (dAng + dPitch));
        double dDiff2 = cos(fAng - dAng);
        self.Pitch = -fPitch * dDiff2 + dPitch;  // changed from fPitch to -fPitch
        self.Roll = fPitch * dDiff1;
        self.Angle = dAng;
    }

    static void AlignToSlopeCeiling(Actor self, double dAng, double dPitch)
    {
        vector3 fNormal = self.CurSector.CeilingPlane.Normal;
        vector2 fNormalP1 = (fNormal.X != 0 || fNormal.Y != 0) ? (fNormal.X, fNormal.Y).Unit() : (0, 0);
        vector2 fNormalP2 = ((fNormal.X, fNormal.Y).Length(), fNormal.Z);
        double fAng = atan2(fNormalP1.Y, fNormalP1.X); // floor angle (not pitch!)
        double fPitch = atan2(fNormalP2.X, fNormalP2.Y); // floor pitch
        self.Pitch = fPitch;
        self.Angle = fAng;
		self.Roll = dAng;
    }

}


class Crash play
{
	const CASH_THROW_MAX_DIST = 3.0;
	const CASH_THROW_MIN_HEIGHT = 8.0;
	const CASH_THROW_MAX_HEIGHT = 15.0;
	const CASH_SPAWN_OFFSET = 24.0;	

	//---------------------------------------------------------------------------
	// function to spawn and throw cash actor
	//---------------------------------------------------------------------------	
	static void SpawnCash(Actor self, string spawnclass)
	{
		let mo = actor.Spawn( spawnclass, (self.pos.x, self.pos.y, self.pos.z + CASH_SPAWN_OFFSET), NO_REPLACE );
		if (mo)
		{
			mo.Angle = self.angle;
			mo.vel.x = frandom( - CASH_THROW_MAX_DIST, CASH_THROW_MAX_DIST );
			mo.vel.y = frandom( - CASH_THROW_MAX_DIST, CASH_THROW_MAX_DIST );
			mo.vel.z = frandom( CASH_THROW_MIN_HEIGHT, CASH_THROW_MAX_HEIGHT );
		}
	}

	//---------------------------------------------------------------------------
	// function to spawn a row of collision objects along the y axis + angle of given actor
	//---------------------------------------------------------------------------	
	static void SpawnCollisionChild(Actor self, double xoffset, double ystart, double yend, double yspacing, double zoffset, int radius, int height)
	{
		if (!self.target && self.LookForPlayers(true) == true)
		{
			self.A_ClearTarget(); // checking for player gives a target, so we clear it
			for ( int i = ystart; i <= yend; i += yspacing )
			{			
				let mo = Actor.Spawn("CollisionChild", self.pos, NO_REPLACE);
				if (mo)
				{
					mo.A_SetSize(radius, height, false);
					mo.master = self;
					mo.mass = self.mass;
					mo.pushfactor = self.pushfactor;
					mo.A_Warp(AAPTR_MASTER, xoffset, i, zoffset, 0, WARPF_NOCHECKPOSITION);
				}
			}
		}
	}

}



class Glow1 : Actor

{
    bool bSloped;

    override void Tick()
    {
        if (!bSloped)
        {
            Physics.AlignToSlopeSprite(self, self.Angle, 0.f);
            bSloped = true;
        }
        Super.Tick();
    }

	Default
	{
		Radius 64;
		+FLATSPRITE;
		+ROLLSPRITE;
		//+NOGRAVITY;
	}
	States
	{
	Spawn:
		GLOW A -1 BRIGHT;
		Stop;
	}

}


class Glow3 : Glow1
{
Default
	{
		Radius 24;
	}
	States
	{
	Spawn:
		GLOW B -1 BRIGHT;
		Stop;
	}

}



class Glow1Ceiling : Actor

{
    bool bSloped;

    override void Tick()
    {
        if (!bSloped)
        {
            Physics.AlignToSlopeCeiling(self, self.Angle, 0.f);
            bSloped = true;
        }
        Super.Tick();
    }

	Default
	{
		Radius 64;
		Height 1;
		+FLATSPRITE;
		+ROLLSPRITE;
		+NOGRAVITY;
		+SPAWNCEILING;
	}
	States
	{
	Spawn:
		GLOW A -1 BRIGHT;
		Stop;
	}

}

class Glow3Ceiling : Glow1Ceiling
{
Default
	{
		Radius 24;
	}
	States
	{
	Spawn:
		GLOW B -1 BRIGHT;
		Stop;
	}

}



class SkyVPTrain : SkyViewPoint
{
    PlayerPawn base;
    Vector3 basepos;
	double yspeed;
	double ylength;
	double zheight;
	double xoffset;

    Default
    {
        //$Arg1 "Skybox Speed"
        //$Arg1Tooltip "The Speed the skybox moves at."
        //$Arg2 "Skybox Loop Amount"
        //$Arg2Tooltip "The distance the skybox jumps back when it reaches 0"
	}

    override void PostBeginPlay()
    {
		yspeed = args[1];			// speed train moves at
		ylength = args[2];			// length of 1 loop of scenery

        // Iterate through all of the possible players in the game
        for (int i = 0; i < MAXPLAYERS; i++)
        {
            // If a player is in the game and has spawned...
            if (playeringame[i] && players[i].mo)
            {
                if (!base) { base = players[i].mo; } 	// Set the skybox to follow the first player who is in the game
                else { base = null; break; } 			// If there are multiple players, don't move the skybox
            }
        }
	Super.PostBeginPlay();
    }

    override void Tick()
    {
        if (base)
        {
            Vector3 newvel;

			xoffset =  base.pos.x - health;  // health is set by acs script to the required offset

			// loop y position when it goes too far
			double ypos = pos.y;
			if (pos.y > 0) { ypos -= ylength; }
            SetOrigin((pos.x, ypos, pos.z), false);

            // Reset the viewpoint's height and x location
            zheight = (base.player.viewz + 8);			// god it took me soooo long to figure out i just had to add player to get this to work
            SetOrigin((xoffset, pos.y, zheight), true);

            //if (basepos.y != base.pos.y) { newvel.y = base.vel.y; }		// add player speed if moving
			newvel.y += yspeed;												// add train speed
            A_ChangeVelocity(newvel.x, newvel.y, newvel.z, CVF_RELATIVE | CVF_REPLACE);

            // Save the player's old position for the move checks
            basepos = base.pos;
        }

        Super.Tick();
    }

}


#library "Crash"
#include "zcommon.acs"

//===============================================================
//	functions
//===============================================================

// return the passed value with the sign removed
function int abs (int x)
{
    if (x < 0)
        return -x;

    return x;
}
// return the least of two parameters
function int min (int a, int b)
{
	if (a < b)
		return a;

	return b;
}
// return the greatest of two parameters
function int max (int a, int b)
{
	if (a > b)
		return a;

	return b;
}


//===============================================================
//	Player Setup
//===============================================================

script "CrashPlayerSetup" ENTER {
/*
	SetActorProperty(0, APROP_JUMPZ, 12.0);  			// player increased jump height
	SetActorProperty(0, APROP_ViewHeight, 60.0);  		// player increased eye height (41 default)  blegh 54.0
	SetActorProperty(0, APROP_AttackZOffset, 32.0);  	// player increased attack height
*/
	SetAirControl(0.6);
}


script "CrashPlayerRespawn" RESPAWN {
	ACS_NamedExecuteAlways("CrashPlayerSetup",0,0,0,0);
}

//===============================================================
//	Dynamic Difficulty debug display
//===============================================================
/*

script "PlayerGrade" ENTER {

// debug display
	
	if ( GetCVar("crash_debug") != 0 )
	{
		HudMessage(s:"     grade ", d:GetCVar("player_grade"),
				s:"\n    damage ", f:GetActorProperty(0, APROP_DamageFactor),
				s:"\n    deaths ", d:GetCVar("crash_deaths"),
				s:"\n    spawns ", d:GetCVar("spawn_level"),
				
				s:"\n    cash   ",d:CheckInventory("cash") ;
							HUDMSG_PLAIN | HUDMSG_LAYER_UNDERHUD,	// type
							1,										// id
							CR_PURPLE,								// colour
							-0.6, 0.0,								// x,y
							0);										// time
	}
	Delay(1);
	Restart;
}
*/

//=============================================================================
//	Level interactivity/destruction
//=============================================================================


script "BreakVent" (int lineid) {
    Line_SetBlocking( lineid, 0, BLOCKF_EVERYTHING|BLOCKF_CREATURES|BLOCKF_MONSTERS|BLOCKF_PLAYERS|BLOCKF_FLOATERS );
					// definition of these, cos it's hard to find online
					//fixed GetLineX(int lineID, fixed ratioAlongLine, fixed distanceFromLine)
					//fixed GetLineY(int lineID, fixed ratioAlongLine, fixed distanceFromLine)
	SpawnForced( "MapSpot", GetLineX(lineid,0.5,0), GetLineY(lineid,0.5,0), 0, lineid, 0 ); 	
    SetLineTexture(lineid,SIDE_FRONT,TEXTURE_MIDDLE,"DNVENT5");
    SetLineTexture(lineid,SIDE_BACK,TEXTURE_MIDDLE,"DNVENT5");
    ThingSound(lineid,"break/vent",127);
	SetLineActivation(lineid,0);						// remove activation from all lines with tag

}

script "BreakWall" (int id, int lastid, int time) {       // Remove midtexture based walls
		SetLineTexture(id,SIDE_FRONT,TEXTURE_MIDDLE,"-");
		SetLineTexture(id,SIDE_BACK,TEXTURE_MIDDLE,"-");
		Line_SetBlocking(id,0,BLOCKF_EVERYTHING);
		Thing_SpawnFacing(id,200,1,0);  // spawn explosion
		Radius_Quake2(id,4,10,0,1000,0);

	while (id <= lastid) {
		id++;
		delay(time);
		SetLineTexture(id,SIDE_FRONT,TEXTURE_MIDDLE,"-");
		SetLineTexture(id,SIDE_BACK,TEXTURE_MIDDLE,"-");
		Line_SetBlocking(id,0,BLOCKF_EVERYTHING);
		Thing_SpawnFacing(id,200,1,0);  // spawn explosion
		Radius_Quake2(id,4,10,0,1000,0);
	}

}

script "BreakWall3d" (int id, int lastid, int time) {
    SetLineTexture(id,SIDE_FRONT,TEXTURE_MIDDLE,"-");
    SetLineTexture(id,SIDE_BACK,TEXTURE_MIDDLE,"-");
    Floor_LowerInstant(id,0,100);
    Ceiling_LowerInstant(id,0,100);
    Thing_SpawnFacing(id,200,1,0);  // spawn explosion
	Radius_Quake2(id,4,10,0,1000,0);

	while (id <= lastid) {
		id++;
		delay(time);
		SetLineTexture(id,SIDE_FRONT,TEXTURE_MIDDLE,"-");
		SetLineTexture(id,SIDE_BACK,TEXTURE_MIDDLE,"-");
		Floor_LowerInstant(id,0,100);
		Ceiling_LowerInstant(id,0,100);
		Thing_SpawnFacing(id,200,1,0);  // spawn explosion
		Radius_Quake2(id,4,10,0,1000,0);
	}
}


// glass animation frames
str glass_texture[7] = {"DNXGLS02", "DNXGLS03", "DNXGLS04", "DNXGLS05", "DNXGLS06", "DNXGLS07", "-"};
// glass shrapnel spawn positions along line
int glass_pos[5] = {0.1,0.25,0.5,0.75,0.9};



script "BreakGlass" (int lineid, int shrapnelheight) {

	int var0 = 0;
    Line_SetBlocking( lineid, 0, BLOCKF_EVERYTHING|BLOCKF_CREATURES|BLOCKF_MONSTERS|BLOCKF_PLAYERS|BLOCKF_FLOATERS );
					// definition of these, cos it's hard to find online
					//fixed GetLineX(int lineID, fixed ratioAlongLine, fixed distanceFromLine)
					//fixed GetLineY(int lineID, fixed ratioAlongLine, fixed distanceFromLine)
	SpawnForced( "MapSpot", GetLineX(lineid,0.5,0), GetLineY(lineid,0.5,0), shrapnelheight << 16, lineid, 0 ); 
	PlaySound( lineid, "break/glass", 4, 1.0 );
	SetLineActivation(lineid,0);						// remove activation from all lines with tag

		while(var0 < 7)
		{
			SetLineTexture( lineid, SIDE_FRONT,TEXTURE_MIDDLE, glass_texture[var0] );
			SetLineTexture( lineid, SIDE_BACK,TEXTURE_MIDDLE, glass_texture[var0] );
			 var0++;
			for ( int i = 0; i < 5; i++ )
				{
				// set map spot to a position along the line, and spawn shrapnel there
				SetActorPosition( lineid, GetLineX( lineid,glass_pos[i], 0 ), GetLineY( lineid, glass_pos[i], 0 ), GetActorZ(lineid), 0 );
				SpawnProjectile( lineid,"GlassShrapnel", random(0, 255), random(10, 80), random(50, 100), 1.5, 0 );
				}
		 	Delay(1);
		}

}


script "BreakGlass3d" ( int lineid, int sectorid, int shrapnelheight ) {
	int var0 = 0;
	//raise glass by 28 to allow map spot to fit under it
	FloorAndCeiling_RaiseByValue(sectorid,9999,28);
					// definition of these, cos it's hard to find online
					//fixed GetLineX(int lineID, fixed ratioAlongLine, fixed distanceFromLine)
					//fixed GetLineY(int lineID, fixed ratioAlongLine, fixed distanceFromLine)
	SpawnForced( "MapSpot", GetLineX(lineid,0.5,0), GetLineY(lineid,0.5,0), shrapnelheight << 16, lineid, 0 ); 
	PlaySound( lineid, "break/glass", 4, 1.0 );
		while(var0 < 7)
		{
			SetLineTexture( sectorid, SIDE_FRONT,TEXTURE_MIDDLE, glass_texture[var0] );
			SetLineTexture( sectorid, SIDE_BACK,TEXTURE_MIDDLE, glass_texture[var0] );
			 var0++;
			for ( int i = 0; i < 5; i++ )
				{
				// set map spot to a position along the line, and spawn shrapnel there
				SetActorPosition( lineid, GetLineX( lineid,glass_pos[i], 0 ), GetLineY( lineid, glass_pos[i], 0 ), shrapnelheight << 16, 0 );
				SpawnProjectile( lineid,"GlassShrapnel", random(0, 255), random(10, 80), random(50, 100), 1.5, 0 );
				}
		 	Delay(1);
		}
	// remove glass by dropping it down super low	
	FloorAndCeiling_LowerByValue(sectorid,9999,9999);		
}


script "EnterLadderSector" (int Bottom, int Top)
{
	  //      Print (i:(GetActorZ(ActivatorTID()) >> 16)); //debug

    if((GetActorZ(ActivatorTID()) >> 16) >= Bottom && (GetActorZ(ActivatorTID()) >> 16) < Top)
        {
        SetPlayerProperty(0, 1, PROP_FLY);
        delay(1);
        }
        else
         {
		SetPlayerProperty (0, 0, PROP_FLY);
        delay(1);
   }
       restart;
}

script "ExitLadderSector" (int Ladder)
{
SetPlayerProperty (0, 0, PROP_FLY);
ACS_NamedTerminate("EnterLadderSector", 0);
}

script "BreakScreen" (int lineid) {
	str texture[3] = {"DNSCRN17", "DNSCRN18", "DNSCRN19"};
	int var0 = 0;
	SectorSound("break/glass",127);
					// definition of these, cos it's hard to find online
					//fixed GetLineX(int lineID, fixed ratioAlongLine, fixed distanceFromLine)
					//fixed GetLineY(int lineID, fixed ratioAlongLine, fixed distanceFromLine)
	SpawnForced("MapSpot",GetLineX(lineid,0.3,0),GetLineY(lineid,0.3,0),0,lineid,0); 
	SpawnForced("MapSpot",GetLineX(lineid,0.6,0),GetLineY(lineid,0.6,0),0,lineid,0); 	
		while(var0 < 3)
		{
			SetLineTexture(lineid,SIDE_FRONT,TEXTURE_MIDDLE,texture[var0]);
			SetLineTexture(lineid,SIDE_BACK,TEXTURE_MIDDLE,texture[var0]);
			var0++;
			for(int i = 0; i < 7; i++)
			{
				SpawnProjectile(lineid,"GlassShrapnel", random(0, 255), random(10, 80), random(50, 100), 1.5, 0);
			}
		 	Delay(1);
		}
	Thing_Deactivate(lineid); //turn off any light associated with the screen
}

script "BreakScreenLD" (int lineid, int textureindex) {
	str texture[7] = {"-", "LMCP_1_B", "LMCP_2_B", "LMCP_3_B", "LMCP_4_B", "DNXGLS07", "-"};
	ThingSound(lineid,"break/glass",127);
	SetLineTexture(lineid,SIDE_FRONT,TEXTURE_MIDDLE,texture[textureindex]);
	SetLineTexture(lineid,SIDE_BACK,TEXTURE_MIDDLE,texture[textureindex]);
	for(int i = 0; i < 12; i++)
	{
		SpawnProjectile(lineid,"GlassShrapnel", random(0, 255), random(10, 80), random(50, 100), 1.5, 0);
	}
	Thing_Deactivate(lineid); //turn off any light associated with the screen

}

script "GetViewHeight" (void)
{
	SetResultValue(GetActorViewHeight(1000));
	terminate;
}


/*

script 1000 ENTER
{
     GiveInventory("FlashlightToggle", 1);
     int flframe =  (CheckInventory("Flashlight") / 100);
     SetFont("FLFONT");

       if (CheckInventory("Flashlight") == 0)             // if battery hits 0
       {
             GiveInventory("FlashlightState",1);          // switch torch off
             ActivatorSound("weapons/sshoto",127);
       }

       if (CheckInventory("FlashlightState") == 0)        // if torch is on
       {
             UseInventory("Flashlight");                  // shoot out light
             HudMessage(d:flframe,s:"-"; HUDMSG_PLAIN | HUDMSG_ALPHA, 1, CR_UNTRANSLATED, 0.25, 1.01, 0, 0.5);
       }
       else
       {
             GiveInventory("Flashlight", 1);              // otherwise recharge battery
             HudMessage(d:flframe,s:"/"; HUDMSG_PLAIN | HUDMSG_ALPHA, 1, CR_UNTRANSLATED, 0.25, 1.01, 0, 0.3);
       }




     Delay(1);
     Restart;
}

*/





//============================================================
// ATM Menu
//============================================================
//------------------------
str IntroText = "
     WELCOME CITIZEN#
#
     YOU ARE BANKING#
     WITH INTRACORP#
#
PLEASE PRESENT YOUR WRIST#
TO THE READER TO LOG ON#
#
#
";
//------------------------
 str BaseMenuText = "####
PLEASE SELECT AN OPTION#
#
  WITHDRAW CREDITS#
  DEPOSIT CREDITS#
  EXIT
";
//------------------------
str GoodbyeText = "########
        GOOD BYE
";
//------------------------

#define atm_intro 1
#define atm_menu 2



int cursorXstart;
int cursorYstart;
int cursorZstart;
int StringPos;
int MenuState;
int StillDrawing;
int SelectedItem;


script "UseATM" (int mapspotid)
{
// Freeze Player
	SetPlayerProperty(0,1,PROP_FROZEN);					// Freeze the player's movement
	SetActorVelocity(0,0,0,0,0,0);						// Set player speed to 0
	int JumpBackup = GetActorProperty(0, APROP_JUMPZ);	// remember player jump strength
	SetActorProperty(0, APROP_JUMPZ, 0.0);  			// prevent player from jumping
	int AtmAngle = GetActorAngle(mapspotid);
	AtmAngle = (AtmAngle < 0.5) ? AtmAngle + 0.5 : AtmAngle - 0.5; // reverse angle
	Warp(mapspotid, -46.0, 0, 0, 0.5, WARPF_INTERPOLATE);	// move player in front of atm

// Set up menu
	PlaySound(mapspotid, "atm/logon");
	MenuState = atm_intro;
	StringPos = 0;
	StillDrawing = 1;


	while (MenuState > 0)
	{
		// restrict player view angle
		if ( GetActorAngle(0) < (AtmAngle - 0.15) ) { ChangeActorAngle(0,AtmAngle - 0.15,TRUE);	}
		if ( GetActorAngle(0) > (AtmAngle + 0.15) ) { ChangeActorAngle(0,AtmAngle + 0.15,TRUE);	}
		
		int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
		if (buttons & BT_JUMP && MenuState < 99)
		{
			MenuState = 99;
			StringPos = 0;
			StillDrawing = 1;
		}

		switch(MenuState)
		{

//0
			case 99:
			// ---------------
			// exit menu, restore player movement
				if (StillDrawing == 1)
				{
					PlaySound(mapspotid, "atm/no");
					SetPlayerProperty(0,0,PROP_FROZEN);					// unfreeze player
					SetActorProperty(0, APROP_JUMPZ, JumpBackup);  		// allow player jumping
				}

				if (StillDrawing > 0)
				{
					DrawString(GoodbyeText);
				}
				else Terminate;
				break;

//1
			case atm_intro:
				if (StillDrawing > 0)
				{
					DrawString(IntroText);
					DrawString(IntroText);
				}
				else
				{

					if (buttons & (BT_USE))			// use button
					{
						MenuState = atm_menu; StringPos = 0; StillDrawing = 1;
						PlaySound(mapspotid, "atm/success");
						delay(8);
					}
				}
				break;
//2
			case atm_menu:
				if (StillDrawing > 0)
				{
					DrawString(BaseMenuText);
					DrawString(BaseMenuText);
				}
				else
				{
					if (buttons & BT_FORWARD)			// up
					{
						SelectedItem = (SelectedItem == 0) ? 2 : SelectedItem - 1; // syntax is (expression) ? do this if true : do this if false
						PlaySound(mapspotid, "atm/select");
						delay(8);
						log(i:SelectedItem);
					}

					if (buttons & BT_BACK)			// down
					{
						SelectedItem = (SelectedItem == 2) ? 0 : SelectedItem + 1;
						PlaySound(mapspotid, "atm/select");
						delay(8);
						log(i:SelectedItem);
					}

					else if (buttons & (BT_USE))			// use
					{
						MenuState = atm_intro; StringPos = 0; StillDrawing = 1; SelectedItem = 0;
						PlaySound(mapspotid, "atm/success");
						delay(8);
					}

				}
				break;
		}
		Delay(1);

	}
}


function void DrawString(str StringtoDraw)
{

	if(StillDrawing == 1) // 1 is init value
	{
		if ( !cursorXstart )	// if cursor doesn't already have a position saved, save it now
		{
			cursorXstart = GetActorX(9);
			cursorYstart = GetActorY(9);
			cursorZstart = GetActorZ(9);
		}

		SetActorPosition(9,cursorXstart,cursorYstart,cursorZstart,0); //position cursor at top left

		for (int i = 9000; i < 9100; i++)	// destroy all existing letters
		{
			Thing_Remove(i);
		}

		StillDrawing = 2;
	}


	if ( StringPos < StrLen(StringtoDraw) )
	{

		int character = GetChar(StringtoDraw,StringPos);

	// if character is "#", act as a line break
		if (character == 35)
		{
			SetActorPosition(9,cursorXstart,cursorYstart,GetActorZ(9)-12.0,0);//advance cursor to next line
		}

	// if character is a space
		else if (character == 32)
		{
			SetActorPosition(9,GetActorX(9)+14.0,cursorYstart,GetActorZ(9),0);//advance cursor
		}

		else
		{
			SpawnSpotForced("ComputerText",9,9000 + character - 65, 192);
			SetActorPosition(9,GetActorX(9)+14.0,cursorYstart,GetActorZ(9),0);//advance cursor
		}
	 StringPos ++;
	//	Log(c:character);
	}
	else
	{
		StillDrawing = 0;

	}

}

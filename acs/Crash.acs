#library "Crash"
#include "zcommon.acs"


//===============================================================
//	functions
//===============================================================

// return the passed value with the sign removed
function int abs (int x)
{
    if (x < 0)
        return -x;

    return x;
}



//===============================================================
//	Player Setup
//===============================================================
script "CrashPlayerSetup" ENTER {
	SetActorProperty(0, APROP_JUMPZ, 12.0);  			// player increased jump height
	SetActorProperty(0, APROP_ViewHeight, 60.0);  		// player increased eye height (41 default)  blegh 54.0
	SetActorProperty(0, APROP_AttackZOffset, 32.0);  	// player increased attack height
	SetAirControl(0.6);
}

script "CrashPlayerRespawn" RESPAWN {
	ACS_NamedExecuteAlways("CrashPlayerSetup",0,0,0,0);
}

//===============================================================
//	Dynamic Difficulty
//===============================================================


script "PlayerGrade" ENTER {

// debug display
	
	if ( GetCVar("crash_debug") != 0 )
	{
		HudMessage(s:"     grade ", d:GetCVar("player_grade"),
				s:"\n    damage ", f:GetActorProperty(0, APROP_DamageFactor),
				s:"\n    deaths ", d:GetCVar("crash_deaths"),
				s:"\n    spawns ", d:GetCVar("spawn_level");
							HUDMSG_PLAIN | HUDMSG_LAYER_UNDERHUD,	// type
							1,										// id
							CR_PURPLE,								// colour
							-0.6, 0.0,								// x,y
							0);										// time
	}
	Delay(1);
	Restart;
}


//=============================================================================
//	Level interactivity/destruction
//=============================================================================


script "BreakVent" (int lineid) {
    Line_SetBlocking(lineid,0,BLOCKF_EVERYTHING);
    SetLineTexture(lineid,SIDE_FRONT,TEXTURE_MIDDLE,"DNVENT5");
    SetLineTexture(lineid,SIDE_BACK,TEXTURE_MIDDLE,"DNVENT5");
    ThingSound(lineid,"break/vent",127);
}

script "BreakWall" (int id, int lastid, int time) {       // Remove midtexture based walls
		SetLineTexture(id,SIDE_FRONT,TEXTURE_MIDDLE,"-");
		SetLineTexture(id,SIDE_BACK,TEXTURE_MIDDLE,"-");
		Line_SetBlocking(id,0,BLOCKF_EVERYTHING);
		Thing_SpawnFacing(id,200,1,0);  // spawn explosion
		Radius_Quake2(id,4,10,0,1000,0);

	while (id <= lastid) {
		id++;
		delay(time);
		SetLineTexture(id,SIDE_FRONT,TEXTURE_MIDDLE,"-");
		SetLineTexture(id,SIDE_BACK,TEXTURE_MIDDLE,"-");
		Line_SetBlocking(id,0,BLOCKF_EVERYTHING);
		Thing_SpawnFacing(id,200,1,0);  // spawn explosion
		Radius_Quake2(id,4,10,0,1000,0);
	}

}

script "BreakWall3d" (int id, int lastid, int time) {
    SetLineTexture(id,SIDE_FRONT,TEXTURE_MIDDLE,"-");
    SetLineTexture(id,SIDE_BACK,TEXTURE_MIDDLE,"-");
    Floor_LowerInstant(id,0,100);
    Ceiling_LowerInstant(id,0,100);
    Thing_SpawnFacing(id,200,1,0);  // spawn explosion
	Radius_Quake2(id,4,10,0,1000,0);

	while (id <= lastid) {
		id++;
		delay(time);
		SetLineTexture(id,SIDE_FRONT,TEXTURE_MIDDLE,"-");
		SetLineTexture(id,SIDE_BACK,TEXTURE_MIDDLE,"-");
		Floor_LowerInstant(id,0,100);
		Ceiling_LowerInstant(id,0,100);
		Thing_SpawnFacing(id,200,1,0);  // spawn explosion
		Radius_Quake2(id,4,10,0,1000,0);
	}
}

script "BreakGlass" (int lineid) {

	str texture[7] = {"DNXGLS02", "DNXGLS03", "DNXGLS04", "DNXGLS05", "DNXGLS06", "DNXGLS07", "-"};
	int pos[5] = {0.1,0.25,0.5,0.75,0.9};
	int var0 = 0;
    Line_SetBlocking( lineid, 0, BLOCKF_EVERYTHING|BLOCKF_CREATURES|BLOCKF_MONSTERS|BLOCKF_PLAYERS|BLOCKF_FLOATERS );
					// definition of these, cos it's hard to find online
					//fixed GetLineX(int lineID, fixed ratioAlongLine, fixed distanceFromLine)
					//fixed GetLineY(int lineID, fixed ratioAlongLine, fixed distanceFromLine)
	SpawnForced( "MapSpot", GetLineX(lineid,0.5,0), GetLineY(lineid,0.5,0), 0, lineid, 0 ); 
	PlaySound( lineid, "break/glass", 4, 1.0 );

		while(var0 < 7)
		{
			SetLineTexture( lineid, SIDE_FRONT,TEXTURE_MIDDLE, texture[var0] );
			SetLineTexture( lineid, SIDE_BACK,TEXTURE_MIDDLE, texture[var0] );
			 var0++;
			for ( int i = 0; i < 5; i++ )
				{
				// set map spot to a position along the line, and spawn shrapnel there
				SetActorPosition( lineid, GetLineX( lineid,pos[i], 0 ), GetLineY( lineid, pos[i], 0 ), GetActorZ(lineid) + random( 0, 32 ),0 );
				SpawnProjectile( lineid,"GlassShrapnel", random(0, 255), random(10, 80), random(50, 100), 1.5, 0 );
				}
		 	Delay(1);
		}

}


script "EnterLadderSector" (int Bottom, int Top)
{
	  //      Print (i:(GetActorZ(ActivatorTID()) >> 16)); //debug

    if((GetActorZ(ActivatorTID()) >> 16) >= Bottom && (GetActorZ(ActivatorTID()) >> 16) < Top)
        {
        SetPlayerProperty(0, 1, PROP_FLY);
        delay(1);
        }
        else
         {
		SetPlayerProperty (0, 0, PROP_FLY);
        delay(1);
   }
       restart;
}

script "ExitLadderSector" (int Ladder)
{
SetPlayerProperty (0, 0, PROP_FLY);
ACS_NamedTerminate("EnterLadderSector", 0);
}

script "BreakScreen" (int lineid) {
	str texture[3] = {"DNSCRN17", "DNSCRN18", "DNSCRN19"};
	int var0 = 0;
	SectorSound("break/glass",127);
					// definition of these, cos it's hard to find online
					//fixed GetLineX(int lineID, fixed ratioAlongLine, fixed distanceFromLine)
					//fixed GetLineY(int lineID, fixed ratioAlongLine, fixed distanceFromLine)
	SpawnForced("MapSpot",GetLineX(lineid,0.3,0),GetLineY(lineid,0.3,0),0,lineid,0); 
	SpawnForced("MapSpot",GetLineX(lineid,0.6,0),GetLineY(lineid,0.6,0),0,lineid,0); 	
		while(var0 < 3)
		{
			SetLineTexture(lineid,SIDE_FRONT,TEXTURE_MIDDLE,texture[var0]);
			SetLineTexture(lineid,SIDE_BACK,TEXTURE_MIDDLE,texture[var0]);
			var0++;
			for(int i = 0; i < 7; i++)
			{
				SpawnProjectile(lineid,"GlassShrapnel", random(0, 255), random(10, 80), random(50, 100), 1.5, 0);
			}
		 	Delay(1);
		}
	Thing_Deactivate(lineid); //turn off any light associated with the screen
}

script "BreakScreenLD" (int lineid, int textureindex) {
	str texture[7] = {"-", "LMCP_1_B", "LMCP_2_B", "LMCP_3_B", "LMCP_4_B", "DNXGLS07", "-"};
	ThingSound(lineid,"break/glass",127);
	SetLineTexture(lineid,SIDE_FRONT,TEXTURE_MIDDLE,texture[textureindex]);
	SetLineTexture(lineid,SIDE_BACK,TEXTURE_MIDDLE,texture[textureindex]);
	for(int i = 0; i < 12; i++)
	{
		SpawnProjectile(lineid,"GlassShrapnel", random(0, 255), random(10, 80), random(50, 100), 1.5, 0);
	}
	Thing_Deactivate(lineid); //turn off any light associated with the screen

}

script "GetViewHeight" (void)
{
	SetResultValue(GetActorViewHeight(1000));
	terminate;
}


/*

script 1000 ENTER
{
     GiveInventory("FlashlightToggle", 1);
     int flframe =  (CheckInventory("Flashlight") / 100);
     SetFont("FLFONT");

       if (CheckInventory("Flashlight") == 0)             // if battery hits 0
       {
             GiveInventory("FlashlightState",1);          // switch torch off
             ActivatorSound("weapons/sshoto",127);
       }

       if (CheckInventory("FlashlightState") == 0)        // if torch is on
       {
             UseInventory("Flashlight");                  // shoot out light
             HudMessage(d:flframe,s:"-"; HUDMSG_PLAIN | HUDMSG_ALPHA, 1, CR_UNTRANSLATED, 0.25, 1.01, 0, 0.5);
       }
       else
       {
             GiveInventory("Flashlight", 1);              // otherwise recharge battery
             HudMessage(d:flframe,s:"/"; HUDMSG_PLAIN | HUDMSG_ALPHA, 1, CR_UNTRANSLATED, 0.25, 1.01, 0, 0.3);
       }




     Delay(1);
     Restart;
}

*/